document()
devtools::install()
document()
library(devtools)
document()
install()
install("mikeutils")
install()
install()
load_all()
install()
getwd()
stat_boot_ci()
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("backports")
library(devtools)
install()
install.package("lifecycle")
install.packages("lifecycle")
install.packages("lifecycle")
library(devtools)
install.packages("lifecycle")
library(devtools)
document()
load_all()
mikeutils::library.dynam.unload
mikeutils::library.dynam.unload()
library(mikeutils)
library(devtools)
install.packages("digest")
install.packages('C:/Users/mcf/AppData/Local/Temp/RtmpOOPXtI/downloaded_packages', repos = NULL, type="source")
list.files("C:/Users/mcf/AppData/Local/Temp/RtmpOOPXtI/downloaded_packages")
install.packages('C:/Users/mcf/AppData/Local/Temp/RtmpOOPXtI/downloaded_packages/digest_0.6.23.tar.gz', repos = NULL, type="source")
library(devtools)
install("miketools")
install()
library("microbenchmark")
v <- rnorm(1E4)
as.matrix(v)
norm
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f")
)
mb
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f")
neval = 1000
)
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f"),
neval = 1000
)
mb
microbenchmark
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f"),
times = 1E3
)
mb
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f"),
times = 1E4
)
mb
v <- rnorm(1E6)
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f"),
times = 1E2
)
mb
v <- rnorm(1E10)
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f"),
times = 1E2
)
mb
library(ggplot2)
autoplot(mb)
cent
center
project
project
center
m <- matrix(rnorm(100), nrow = 10)
m
sweep(m, 2, colSums(m), FUN = "-")
scale(m, center = FALSE, scale = colSums(m))
sum(m^2)
m^2
colSums(m^2)
sqrt(colSums(m^2))
scale(m, center = FALSE, scale = sqrt(colSums(m^2)))
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
scale(m, center = FALSE, scale = sqrt(colSums(m^2)))
m <- matrix(rnorm(100), nrow = 10)
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
?norm
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
times = 1E2
)
mb
autoplot(mb)
m <- matrix(rnorm(100000), nrow = 10)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
times = 1E2
)
mb
autoplot(mb)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t(t(m) / t(colMeans(m)))
times = 1E2
)
m <- matrix(rnorm(100000), nrow = 10)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t(t(m) / t(colMeans(m))),
times = 1E5
)
t(colMeans(m))
t(m) / t(colMeans(m)
)
t(colMeans(m))
t(m)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t( t(m) / colMeans(t(m)) ),
times = 1E5
)
m <- matrix(rnorm(1000), nrow = 10)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t( t(m) / colMeans(t(m)) ),
times = 1E5
)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t( t(m) / colMeans(t(m)) ),
times = 1E4
)
mb
autoplot(mb)
m <- matrix(rnorm(1000000), nrow = 10)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t( t(m) / colMeans(t(m)) ),
times = 1E2
)
mb
autoplot(mb)
normcols <- sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
centcols <- sweep(m, 2, colMeans(m), FUN = "-")
ssq
euclnorm <- function(v) sqrt(sum(v^2))
normcols <- sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
centcols <- sweep(m, 2, colMeans(m), FUN = "-")
normcols(rnorm(1000))
euclnorm <- function(v) sqrt(sum(v^2))
normcols <- sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
centcols <- sweep(m, 2, colMeans(m), FUN = "-")
normcols(rnorm(1000))
normcols <- sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
normcols
euclnorm <- function(v) sqrt(sum(v^2))
normcols <- function(m) sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
centcols <- function(m) sweep(m, 2, colMeans(m), FUN = "-")
normcols(rnorm(1000))
dim(data.frame(10, 19))
dim(vector("numeric", 10))
dim(1:10)
ssq <- function(v) sqrt(sum(v^2))
normcols <- function(m) {
if (is.null(dim(m))) {
m / sqrt(colSums(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
center
normalize
center
ssq <- function(v) sqrt(sum(v^2))
normalize <- function(m) {
if (is.null(dim(m))) {
m / sqrt(colSums(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
center <- function(m) {
if (is.null(dim(m))) {
m - mean(m)
} else {
sweep(m, 2, colMeans(m), FUN = "-")
}
}
cosine
1:10
1:10 -> v
1:10 -> w
v / sqrt(sum(1:v^2)) %*% w / sqrt(sum(w^2))
(v / sqrt(sum(1:v^2))) %*% (w / sqrt(sum(w^2)))
(v / sqrt(sum(v^2))) %*% (w / sqrt(sum(w^2)))
v / sqrt(sum(v^2)) %*% w / sqrt(sum(w^2))
cosinesim <- function(v, w) (v / sqrt(sum(v^2))) %*% (w / sqrt(sum(w^2)))
ssq <- function(v) sqrt(sum(v^2))
scale2unit <- function(m) {
if (is.null(dim(m))) {
m / sqrt(colSums(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
meancenter <- function(m) {
if (is.null(dim(m))) {
m - mean(m)
} else {
sweep(m, 2, colMeans(m), FUN = "-")
}
}
cosinesim <- function(v, w) as.numeric((v / sqrt(sum(v^2))) %*% (w / sqrt(sum(w^2))))
ssq(1:1000)
scale2unit(1:1000)
dim(1:1000)
m <- 1000
m / ssq(m)
dim(m)
scale2unit <- function(m) {
if (is.null(dim(m))) {
m / sqrt(colSums(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
scale2unit(m)
is.null(dim(m))
scale2unit <- function(m) {
if (is.null(dim(m))) {
m / sqrt(sum(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
is.null(dim(m))
scale2unit(m)
scale2unit(1:1000)
scale2unit <- function(m) {
if (is.null(dim(m))) {
m / sqrt(sum(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
meancenter <- function(m) {
if (is.null(dim(m))) {
m - mean(m)
} else {
sweep(m, 2, colMeans(m), FUN = "-")
}
}
cosinesim <- function(v, w) as.numeric((v / sqrt(sum(v^2))) %*% (w / sqrt(sum(w^2))))
install()
library(devtools)
install()
library(usethis)
use_r("similarity_matrix_operations")
install.packages("data.table")
compliment
error
install.packages(c("data.table", "here", "lme4", "oro.nifti", "robustbase"))
install.packages(c("here", "lme4", "robustbase", "oro.nifti", "gifti", "cifti"))
install()
library(devtools)
install()
document()
install()
library(mikeutils)
combo.paste(a = apply(array, margin, ...)a = apply(array, margin, ...))
getwd()
document()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::install_github('mikeutils', "mcfreund")
?devtools::install_github
devtools::install("mikeutils")
devtools::install()
devtools::install_github()
devtools::install_github("mcfreund/mikeutils")
