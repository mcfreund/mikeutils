install.packages("lifecycle")
library(devtools)
document()
load_all()
mikeutils::library.dynam.unload
mikeutils::library.dynam.unload()
library(mikeutils)
library(devtools)
install.packages("digest")
install.packages('C:/Users/mcf/AppData/Local/Temp/RtmpOOPXtI/downloaded_packages', repos = NULL, type="source")
list.files("C:/Users/mcf/AppData/Local/Temp/RtmpOOPXtI/downloaded_packages")
install.packages('C:/Users/mcf/AppData/Local/Temp/RtmpOOPXtI/downloaded_packages/digest_0.6.23.tar.gz', repos = NULL, type="source")
library(devtools)
install("miketools")
install()
library("microbenchmark")
v <- rnorm(1E4)
as.matrix(v)
norm
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f")
)
mb
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f")
neval = 1000
)
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f"),
neval = 1000
)
mb
microbenchmark
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f"),
times = 1E3
)
mb
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f"),
times = 1E4
)
mb
v <- rnorm(1E6)
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f"),
times = 1E2
)
mb
v <- rnorm(1E10)
mb <- microbenchmark(
"vector" = sqrt(sum(v^2)),
"norm" = norm(as.matrix(v), type = "f"),
times = 1E2
)
mb
library(ggplot2)
autoplot(mb)
cent
center
project
project
center
m <- matrix(rnorm(100), nrow = 10)
m
sweep(m, 2, colSums(m), FUN = "-")
scale(m, center = FALSE, scale = colSums(m))
sum(m^2)
m^2
colSums(m^2)
sqrt(colSums(m^2))
scale(m, center = FALSE, scale = sqrt(colSums(m^2)))
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
scale(m, center = FALSE, scale = sqrt(colSums(m^2)))
m <- matrix(rnorm(100), nrow = 10)
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
?norm
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
times = 1E2
)
mb
autoplot(mb)
m <- matrix(rnorm(100000), nrow = 10)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
times = 1E2
)
mb
autoplot(mb)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t(t(m) / t(colMeans(m)))
times = 1E2
)
m <- matrix(rnorm(100000), nrow = 10)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t(t(m) / t(colMeans(m))),
times = 1E5
)
t(colMeans(m))
t(m) / t(colMeans(m)
)
t(colMeans(m))
t(m)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t( t(m) / colMeans(t(m)) ),
times = 1E5
)
m <- matrix(rnorm(1000), nrow = 10)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t( t(m) / colMeans(t(m)) ),
times = 1E5
)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t( t(m) / colMeans(t(m)) ),
times = 1E4
)
mb
autoplot(mb)
m <- matrix(rnorm(1000000), nrow = 10)
mb <- microbenchmark(
"sweep" = sweep(m, 2, sqrt(colSums(m^2)), FUN = "/"),
"scale" = scale(m, center = FALSE, scale = sqrt(colSums(m^2))),
"recycle" = t( t(m) / colMeans(t(m)) ),
times = 1E2
)
mb
autoplot(mb)
normcols <- sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
centcols <- sweep(m, 2, colMeans(m), FUN = "-")
ssq
euclnorm <- function(v) sqrt(sum(v^2))
normcols <- sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
centcols <- sweep(m, 2, colMeans(m), FUN = "-")
normcols(rnorm(1000))
euclnorm <- function(v) sqrt(sum(v^2))
normcols <- sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
centcols <- sweep(m, 2, colMeans(m), FUN = "-")
normcols(rnorm(1000))
normcols <- sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
normcols
euclnorm <- function(v) sqrt(sum(v^2))
normcols <- function(m) sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
centcols <- function(m) sweep(m, 2, colMeans(m), FUN = "-")
normcols(rnorm(1000))
dim(data.frame(10, 19))
dim(vector("numeric", 10))
dim(1:10)
ssq <- function(v) sqrt(sum(v^2))
normcols <- function(m) {
if (is.null(dim(m))) {
m / sqrt(colSums(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
center
normalize
center
ssq <- function(v) sqrt(sum(v^2))
normalize <- function(m) {
if (is.null(dim(m))) {
m / sqrt(colSums(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
center <- function(m) {
if (is.null(dim(m))) {
m - mean(m)
} else {
sweep(m, 2, colMeans(m), FUN = "-")
}
}
cosine
1:10
1:10 -> v
1:10 -> w
v / sqrt(sum(1:v^2)) %*% w / sqrt(sum(w^2))
(v / sqrt(sum(1:v^2))) %*% (w / sqrt(sum(w^2)))
(v / sqrt(sum(v^2))) %*% (w / sqrt(sum(w^2)))
v / sqrt(sum(v^2)) %*% w / sqrt(sum(w^2))
cosinesim <- function(v, w) (v / sqrt(sum(v^2))) %*% (w / sqrt(sum(w^2)))
ssq <- function(v) sqrt(sum(v^2))
scale2unit <- function(m) {
if (is.null(dim(m))) {
m / sqrt(colSums(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
meancenter <- function(m) {
if (is.null(dim(m))) {
m - mean(m)
} else {
sweep(m, 2, colMeans(m), FUN = "-")
}
}
cosinesim <- function(v, w) as.numeric((v / sqrt(sum(v^2))) %*% (w / sqrt(sum(w^2))))
ssq(1:1000)
scale2unit(1:1000)
dim(1:1000)
m <- 1000
m / ssq(m)
dim(m)
scale2unit <- function(m) {
if (is.null(dim(m))) {
m / sqrt(colSums(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
scale2unit(m)
is.null(dim(m))
scale2unit <- function(m) {
if (is.null(dim(m))) {
m / sqrt(sum(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
is.null(dim(m))
scale2unit(m)
scale2unit(1:1000)
scale2unit <- function(m) {
if (is.null(dim(m))) {
m / sqrt(sum(m^2))
} else {
sweep(m, 2, sqrt(colSums(m^2)), FUN = "/")
}
}
meancenter <- function(m) {
if (is.null(dim(m))) {
m - mean(m)
} else {
sweep(m, 2, colMeans(m), FUN = "-")
}
}
cosinesim <- function(v, w) as.numeric((v / sqrt(sum(v^2))) %*% (w / sqrt(sum(w^2))))
install()
library(devtools)
install()
library(usethis)
use_r("similarity_matrix_operations")
install.packages("data.table")
compliment
error
install.packages(c("data.table", "here", "lme4", "oro.nifti", "robustbase"))
install.packages(c("here", "lme4", "robustbase", "oro.nifti", "gifti", "cifti"))
install()
library(devtools)
install()
document()
install()
library(mikeutils)
combo.paste(a = apply(array, margin, ...)a = apply(array, margin, ...))
getwd()
document()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::install_github('mikeutils', "mcfreund")
?devtools::install_github
devtools::install("mikeutils")
devtools::install()
devtools::install_github()
devtools::install_github("mcfreund/mikeutils")
devtools::install()
devtools::install_github("mcfreund/mikeutils")
devtools::install_github("mcfreund/mikeutils")
devtools::document()
devtools::install_github("mcfreund/mikeutils")
reshape2::melt
?reshape2::melt
?reshape2::melt
#' @export
mat2vec <- function(m) {
if (any(is.na(m))) stop("matrix contains NA values.")
m[upper.tri(m, diag = TRUE)] <- NA
reshape2::melt(m, na.rm = TRUE, factorsAsStrings = TRUE)
}
strings
#' @export
mat2vec <- function(m, strings = TRUE) {
if (any(is.na(m))) stop("matrix contains NA values.")
m[upper.tri(m, diag = TRUE)] <- NA
d <- reshape2::melt(m, na.rm = TRUE)
if (strings) {
i <- sapply(d, is.factor)
d[i] <- lapply(d[i], as.character)
}
d
}
tri
lower
devtools::document()
devtools::install()
#' @export
mat2vec <- function(m, strings = TRUE, full.matrix = FALSE) {
if (any(is.na(m))) stop("matrix contains NA values.")
if (!full.matrix) m[upper.tri(m, diag = TRUE)] <- NA
d <- reshape2::melt(m, na.rm = TRUE)
if (strings) {
i <- sapply(d, is.factor)
d[i] <- lapply(d[i], as.character)
}
d
}
reshape2::melt
?reshape2::melt
name
#' @export
mat2vec <- function(m, full.matrix = FALSE, ...) {
if (any(is.na(m))) stop("matrix contains NA values.")
if (!full.matrix) m[upper.tri(m, diag = TRUE)] <- NA
d <- reshape2::melt(m, na.rm = TRUE, id.vars = c(".row", ".col"), ...)
i <- sapply(d, is.factor)
d[i] <- lapply(d[i], as.character)
d
}
#' @export
mat2vec <- function(m, full.matrix = FALSE, ...) {
if (any(is.na(m))) stop("matrix contains NA values.")
if (!full.matrix) m[upper.tri(m, diag = TRUE)] <- NA
d <- reshape2::melt(m, na.rm = TRUE, id.vars = c(".row", ".col"), ...)
i <- sapply(d, is.factor)
d[i] <- lapply(d[i], as.character)
d
}
#' @export
mat2vec <- function(m, full.matrix = FALSE, ...) {
if (any(is.na(m))) stop("matrix contains NA values.")
if (!full.matrix) m[upper.tri(m, diag = TRUE)] <- NA
d <- reshape2::melt(m, na.rm = TRUE, id.vars = c(".row", ".col"), ...)
i <- sapply(d, is.factor)
d[i] <- lapply(d[i], as.character)
d
}
melt.matrix
reshape::melt.matrix
reshape2::melt.matrix
?reshape2::melt.matrix
#' @export
mat2vec <- function(m, full.matrix = FALSE, varnames = c(".row", ".col"), ...) {
if (any(is.na(m))) stop("matrix contains NA values.")
if (!full.matrix) m[upper.tri(m, diag = TRUE)] <- NA
d <- reshape2::melt(m, as.is = TRUE, na.rm = TRUE, varnames = varnames, ...)
d
}
matrix(1:10)
array(1:10)
is.array(array(1:10))
is.array(matrix(1:10))
#' @export
mat2vec <- function(m, full.matrix = FALSE, varnames = c(".row", ".col"), ...) {
if (any(is.na(m))) stop("matrix contains NA values.")
if (!is.array(m)) stop("m is not array.")
if (!full.matrix) m[upper.tri(m, diag = TRUE)] <- NA
reshape2::melt(m, as.is = TRUE, na.rm = TRUE, varnames = varnames, ...)
}
devtools::document()
devtools::install_github("mcfreund/mikeutils")
library(devtools)
library(usethis)
library(roxygen2)
use_r("plot_surfaces")
document()
install()
devtools::install()
library(mikeutils)
install('mikeutils')
devtools::install('mikeutils')
devtools::install_github("mcfreund/mikeutils")
git status
document()
devtools::document()
devtools::document()
mikeutils::plot.surface()
?mikeutils::plot.surface()
library(devtools)
document()
?mikeutils::plot.surface()
document()
?mikeutils::plot.surface()
document()
?mikeutils::plot.surface()
?mikeutils::plot_surface()
document()
mikeutils::plot_surface()
?mikeutils::plot_surface()
?mikeutils::plot_surface()
use_r("afni")
use_r("collate_surface_params")
system2
args
fun
missing
.Platform$OS.type
devtools::document()
dir.glm <- file.path(
"/scratch1/witzermanm/AFNI_ANALYSIS_SUBSUBJECT/RESULTS_RUNWISE",
"204319", "Axcpt", "baseline",
"baseline_Cues_EVENTS_censored_run1"
)
xlabels <- c(
## intercept and baseline drift
"Run#1Pol#0", "Run#1Pol#1", "Run#1Pol#2", "Run#1Pol#3", "Run#1Pol#4", "Run#1Pol#5",
## sustained
"block#0",
## transient
"blockONandOFF#0", "blockONandOFF#1", "blockONandOFF#2", "blockONandOFF#3", "blockONandOFF#4", "blockONandOFF#5",
## events
"AX#0", "AX#1", "AX#2", "AX#3", "AX#4", "AX#5", "AX#6", "AX#7",
"AY#0", "AY#1", "AY#2", "AY#3", "AY#4", "AY#5", "AY#6", "AY#7",
"Ang#0", "Ang#1", "Ang#2", "Ang#3", "Ang#4", "Ang#5", "Ang#6", "Ang#7",
"BX#0", "BX#1", "BX#2", "BX#3", "BX#4", "BX#5", "BX#6", "BX#7",
"BY#0", "BY#1", "BY#2", "BY#3", "BY#4", "BY#5", "BY#6", "BY#7",
"Bng#0", "Bng#1", "Bng#2", "Bng#3", "Bng#4", "Bng#5", "Bng#6", "Bng#7",
## movement
"movregs[0]#0", "movregs[1]#0", "movregs[2]#0", "movregs[3]#0", "movregs[4]#0", "movregs[5]#0"
)
name <- file.path(dir.glm, paste0("betas_204319_L.func.gii"))
space <- "hcp"
by.label = FALSE
filename
devtools::document()
document()
document()
document()
document()
document()
devtools::document()
devtools::document()
library(devtools)
library(roxygen2)
use_r("outpro.R")
use_r("farout.R")
document()
library(mikeutils)
install_github("mcfreund/mikeutils")
document()
document()
library(mikeutils)
install_github("mcfreund/mikeutils")
library(devtools)
use_r("read_dmcc_behav.R")
Sys.info()["nodename"]
if (Sys.info()["nodename"] == "CCP-FREUND") TRUE else FALSE
dir.exists(boxdrive.path)
boxdrive.path = "C:/Users/mcf/Box"
dir.exists(boxdrive.path)
files
files
files <- c("axcpt", "cuedts", "stern", "stroop", "subjsum")
files
files %in% c("axcpt", "cuedts", "stern", "stroop", "subjsum")
if (!any(files %in% c("axcpt", "cuedts", "stern", "stroop", "subjsum"))) stop("bad task string")
vector("list", length(files))
setNames(vector("list", length(files)), files)
file.path(dl["box.dmcc2.sheets"]
path
path <- file.path(boxdrive.path, "Preprocessed_Data", "_wrangled")
path
install_github("mcfreund/mikeutils")
document()
document("read_dmcc_behav.R")
document("R\read_dmcc_behav.R")
document("read_dmcc_behav.R")
document()
q()
document()
library(devtools)
document()
install_github("mcfreund/mikeutils")
document()
install_github("mcfreund/mikeutils")
document()
install_github
?install_github
install_github("mcfreund/mikeutils", upgrade = "never")
document()
install_github("mcfreund/mikeutils", upgrade = "never")
document()
install_github("mcfreund/mikeutils", upgrade = "never")
document()
install_github("mcfreund/mikeutils", upgrade = "never")
install_github("mcfreund/mikeutils", upgrade = "never")
document()
install_github("mcfreund/mikeutils", upgrade = "never")
install_github("mcfreund/mikeutils", upgrade = "never")
